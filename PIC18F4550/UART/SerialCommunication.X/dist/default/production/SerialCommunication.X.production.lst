

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jul 20 00:45:06 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    12                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    18  0000                     
    19                           ; Version 1.42
    20                           ; Generated 13/04/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _RCREG	set	4014
    54  0000                     _TXREG	set	4013
    55  0000                     _TRISCbits	set	3988
    56  0000                     _IPR1bits	set	3999
    57  0000                     _PIE1bits	set	3997
    58  0000                     _RCSTAbits	set	4011
    59  0000                     _TXSTAbits	set	4012
    60  0000                     _SPBRG	set	4015
    61  0000                     _PIR1bits	set	3998
    62  0000                     _INTCONbits	set	4082
    63  0000                     _ADCON1	set	4033
    64                           
    65                           	psect	smallconst
    66  000800                     __psmallconst:
    67                           	opt stack 0
    68  000800  00                 	db	0
    69  000801                     STR_1:
    70  000801  54                 	db	84	;'T'
    71  000802  65                 	db	101	;'e'
    72  000803  73                 	db	115	;'s'
    73  000804  74                 	db	116	;'t'
    74  000805  61                 	db	97	;'a'
    75  000806  6E                 	db	110	;'n'
    76  000807  64                 	db	100	;'d'
    77  000808  6F                 	db	111	;'o'
    78  000809  20                 	db	32
    79  00080A  55                 	db	85	;'U'
    80  00080B  53                 	db	83	;'S'
    81  00080C  41                 	db	65	;'A'
    82  00080D  52                 	db	82	;'R'
    83  00080E  54                 	db	84	;'T'
    84  00080F  21                 	db	33
    85  000810  00                 	db	0
    86                           
    87                           ; #config settings
    88  000811  00                 	db	0	; dummy byte at the end
    89  0000                     
    90                           	psect	cinit
    91  00097E                     __pcinit:
    92                           	opt stack 0
    93  00097E                     start_initialization:
    94                           	opt stack 0
    95  00097E                     __initialization:
    96                           	opt stack 0
    97  00097E                     end_of_initialization:
    98                           	opt stack 0
    99  00097E                     __end_of__initialization:
   100                           	opt stack 0
   101  00097E  9018               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   102  000980  9218               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   103  000982  0E00               	movlw	low (__Lmediumconst shr (0+16))
   104  000984  6EF8               	movwf	tblptru,c
   105  000986  0100               	movlb	0
   106  000988  EFB3  F004         	goto	_main	;jump to C main() function
   107                           tblptru	equ	0xFF8
   108                           
   109                           	psect	cstackCOMRAM
   110  000001                     __pcstackCOMRAM:
   111                           	opt stack 0
   112  000001                     print_char@word:
   113                           	opt stack 0
   114  000001                     SerialRead@receive:
   115                           	opt stack 0
   116                           
   117                           ; 2 bytes @ 0x0
   118  000001                     	ds	2
   119  000003                     ??_Interrupt:
   120                           
   121                           ; 1 bytes @ 0x2
   122  000003                     	ds	14
   123  000011                     Interrupt@receive:
   124                           	opt stack 0
   125                           
   126                           ; 1 bytes @ 0x10
   127  000011                     	ds	1
   128  000012                     println_string@word:
   129                           	opt stack 0
   130                           
   131                           ; 2 bytes @ 0x11
   132  000012                     	ds	2
   133  000014                     ??_println_string:
   134                           
   135                           ; 1 bytes @ 0x13
   136  000014                     	ds	2
   137  000016                     println_string@i:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x15
   141  000016                     	ds	2
   142  000018                     tblptru	equ	0xFF8
   143                           
   144                           ; 1 bytes @ 0x17
   145 ;;
   146 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   147 ;;
   148 ;; *************** function _main *****************
   149 ;; Defined at:
   150 ;;		line 13 in file "main.c"
   151 ;; Parameters:    Size  Location     Type
   152 ;;		None
   153 ;; Auto vars:     Size  Location     Type
   154 ;;		None
   155 ;; Return value:  Size  Location     Type
   156 ;;                  1    wreg      void 
   157 ;; Registers used:
   158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   159 ;; Tracked objects:
   160 ;;		On entry : 0/0
   161 ;;		On exit  : 0/0
   162 ;;		Unchanged: 0/0
   163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   164 ;;      Params:         0       0       0       0       0       0       0       0       0
   165 ;;      Locals:         0       0       0       0       0       0       0       0       0
   166 ;;      Temps:          0       0       0       0       0       0       0       0       0
   167 ;;      Totals:         0       0       0       0       0       0       0       0       0
   168 ;;Total ram usage:        0 bytes
   169 ;; Hardware stack levels required when called:    3
   170 ;; This function calls:
   171 ;;		_SerialBegin
   172 ;;		_println_string
   173 ;; This function is called by:
   174 ;;		Startup code after reset
   175 ;; This function uses a non-reentrant model
   176 ;;
   177                           
   178                           	psect	text0
   179  000966                     __ptext0:
   180                           	opt stack 0
   181  000966                     _main:
   182                           	opt stack 28
   183                           
   184                           ;main.c: 15: ADCON1 = 0x0F;
   185                           
   186                           ;incstack = 0
   187  000966  0E0F               	movlw	15
   188  000968  6EC1               	movwf	4033,c	;volatile
   189                           
   190                           ;main.c: 18: SerialBegin();
   191  00096A  ECA5  F004         	call	_SerialBegin	;wreg free
   192                           
   193                           ;main.c: 21: INTCONbits.GIE = 1;
   194  00096E  8EF2               	bsf	intcon,7,c	;volatile
   195                           
   196                           ;main.c: 24: println_string("Testando USART!");
   197  000970  0E01               	movlw	low STR_1
   198  000972  6E12               	movwf	println_string@word,c
   199  000974  0E08               	movlw	high STR_1
   200  000976  6E13               	movwf	println_string@word+1,c
   201  000978  EC53  F004         	call	_println_string	;wreg free
   202  00097C                     l19:
   203  00097C  D7FF               	goto	l19
   204  00097E                     __end_of_main:
   205                           	opt stack 0
   206                           tblptru	equ	0xFF8
   207                           intcon	equ	0xFF2
   208                           
   209 ;; *************** function _println_string *****************
   210 ;; Defined at:
   211 ;;		line 45 in file "Serial.c"
   212 ;; Parameters:    Size  Location     Type
   213 ;;  word            2   17[COMRAM] PTR unsigned char 
   214 ;;		 -> println_long@buffer(33), println_int@buffer(17), STR_1(16), 
   215 ;; Auto vars:     Size  Location     Type
   216 ;;  i               2   21[COMRAM] int 
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   226 ;;      Params:         2       0       0       0       0       0       0       0       0
   227 ;;      Locals:         2       0       0       0       0       0       0       0       0
   228 ;;      Temps:          2       0       0       0       0       0       0       0       0
   229 ;;      Totals:         6       0       0       0       0       0       0       0       0
   230 ;;Total ram usage:        6 bytes
   231 ;; Hardware stack levels used:    1
   232 ;; Hardware stack levels required when called:    2
   233 ;; This function calls:
   234 ;;		Nothing
   235 ;; This function is called by:
   236 ;;		_main
   237 ;;		_println_int
   238 ;;		_println_long
   239 ;; This function uses a non-reentrant model
   240 ;;
   241                           
   242                           	psect	text1
   243  0008A6                     __ptext1:
   244                           	opt stack 0
   245  0008A6                     _println_string:
   246                           	opt stack 28
   247                           
   248                           ;Serial.c: 46: for(int i = 0; word[i] != '\0' ; i++){
   249                           
   250                           ;incstack = 0
   251  0008A6  0E00               	movlw	0
   252  0008A8  6E17               	movwf	println_string@i+1,c
   253  0008AA  0E00               	movlw	0
   254  0008AC  6E16               	movwf	println_string@i,c
   255  0008AE  D01B               	goto	l890
   256  0008B0                     l886:
   257                           
   258                           ;Serial.c: 47: TXREG = word[i];
   259  0008B0  5016               	movf	println_string@i,w,c
   260  0008B2  2412               	addwf	println_string@word,w,c
   261  0008B4  6E14               	movwf	??_println_string& (0+255),c
   262  0008B6  5017               	movf	println_string@i+1,w,c
   263  0008B8  2013               	addwfc	println_string@word+1,w,c
   264  0008BA  6E15               	movwf	(??_println_string+1)& (0+255),c
   265  0008BC  C014  FFF6         	movff	??_println_string,tblptrl
   266  0008C0  C015  FFF7         	movff	??_println_string+1,tblptrh
   267  0008C4  6AF8               	clrf	tblptru,c
   268  0008C6  0E07               	movlw	(high __ramtop+-1)
   269  0008C8  64F7               	cpfsgt	tblptrh,c
   270  0008CA  D003               	bra	u197
   271  0008CC  0008               	tblrd		*
   272  0008CE  50F5               	movf	tablat,w,c
   273  0008D0  D005               	bra	u190
   274  0008D2                     u197:
   275  0008D2  CFF6 FFE9          	movff	tblptrl,fsr0l
   276  0008D6  CFF7 FFEA          	movff	tblptrh,fsr0h
   277  0008DA  50EF               	movf	indf0,w,c
   278  0008DC                     u190:
   279  0008DC  6EAD               	movwf	4013,c	;volatile
   280  0008DE                     l70:
   281  0008DE  A2AC               	btfss	4012,1,c	;volatile
   282  0008E0  D7FE               	goto	l70
   283  0008E2  4A16               	infsnz	println_string@i,f,c
   284  0008E4  2A17               	incf	println_string@i+1,f,c
   285  0008E6                     l890:
   286  0008E6  5016               	movf	println_string@i,w,c
   287  0008E8  2412               	addwf	println_string@word,w,c
   288  0008EA  6E14               	movwf	??_println_string& (0+255),c
   289  0008EC  5017               	movf	println_string@i+1,w,c
   290  0008EE  2013               	addwfc	println_string@word+1,w,c
   291  0008F0  6E15               	movwf	(??_println_string+1)& (0+255),c
   292  0008F2  C014  FFF6         	movff	??_println_string,tblptrl
   293  0008F6  C015  FFF7         	movff	??_println_string+1,tblptrh
   294  0008FA  6AF8               	clrf	tblptru,c
   295  0008FC  0E07               	movlw	(high __ramtop+-1)
   296  0008FE  64F7               	cpfsgt	tblptrh,c
   297  000900  D003               	bra	u217
   298  000902  0008               	tblrd		*
   299  000904  50F5               	movf	tablat,w,c
   300  000906  D005               	bra	u210
   301  000908                     u217:
   302  000908  CFF6 FFE9          	movff	tblptrl,fsr0l
   303  00090C  CFF7 FFEA          	movff	tblptrh,fsr0h
   304  000910  50EF               	movf	indf0,w,c
   305  000912                     u210:
   306  000912  0900               	iorlw	0
   307  000914  A4D8               	btfss	status,2,c
   308  000916  D7CC               	goto	l886
   309                           
   310                           ;Serial.c: 49: }
   311                           ;Serial.c: 50: TXREG = '\r';
   312  000918  0E0D               	movlw	13
   313  00091A  6EAD               	movwf	4013,c	;volatile
   314  00091C                     l74:
   315  00091C  A2AC               	btfss	4012,1,c	;volatile
   316  00091E  D7FE               	goto	l74
   317                           
   318                           ;Serial.c: 52: TXREG = '\n';
   319  000920  0E0A               	movlw	10
   320  000922  6EAD               	movwf	4013,c	;volatile
   321  000924                     l77:
   322  000924  B2AC               	btfsc	4012,1,c	;volatile
   323  000926  0012               	return	
   324  000928  D7FD               	goto	l77
   325  00092A                     __end_of_println_string:
   326                           	opt stack 0
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           intcon	equ	0xFF2
   332                           indf0	equ	0xFEF
   333                           fsr0h	equ	0xFEA
   334                           fsr0l	equ	0xFE9
   335                           status	equ	0xFD8
   336                           
   337 ;; *************** function _SerialBegin *****************
   338 ;; Defined at:
   339 ;;		line 14 in file "Serial.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg, status,2
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   353 ;;      Params:         0       0       0       0       0       0       0       0       0
   354 ;;      Locals:         0       0       0       0       0       0       0       0       0
   355 ;;      Temps:          0       0       0       0       0       0       0       0       0
   356 ;;      Totals:         0       0       0       0       0       0       0       0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels used:    1
   359 ;; Hardware stack levels required when called:    2
   360 ;; This function calls:
   361 ;;		Nothing
   362 ;; This function is called by:
   363 ;;		_main
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           	psect	text2
   368  00094A                     __ptext2:
   369                           	opt stack 0
   370  00094A                     _SerialBegin:
   371                           	opt stack 28
   372                           
   373                           ;Serial.c: 16: SPBRG = 25;
   374                           
   375                           ;incstack = 0
   376  00094A  0E19               	movlw	25
   377  00094C  6EAF               	movwf	4015,c	;volatile
   378                           
   379                           ;Serial.c: 18: TXSTAbits.BRGH = 1;
   380  00094E  84AC               	bsf	4012,2,c	;volatile
   381                           
   382                           ;Serial.c: 19: TXSTAbits.SYNC = 0;
   383  000950  98AC               	bcf	4012,4,c	;volatile
   384                           
   385                           ;Serial.c: 20: TXSTAbits.TXEN = 1;
   386  000952  8AAC               	bsf	4012,5,c	;volatile
   387                           
   388                           ;Serial.c: 22: RCSTAbits.SPEN = 1;
   389  000954  8EAB               	bsf	4011,7,c	;volatile
   390                           
   391                           ;Serial.c: 23: RCSTAbits.CREN = 1;
   392  000956  88AB               	bsf	4011,4,c	;volatile
   393                           
   394                           ;Serial.c: 25: INTCONbits.PEIE = 1;
   395  000958  8CF2               	bsf	intcon,6,c	;volatile
   396                           
   397                           ;Serial.c: 27: PIR1bits.RCIF = 0;
   398  00095A  9A9E               	bcf	3998,5,c	;volatile
   399                           
   400                           ;Serial.c: 28: PIE1bits.RCIE = 1;
   401  00095C  8A9D               	bsf	3997,5,c	;volatile
   402                           
   403                           ;Serial.c: 30: IPR1bits.RCIP = 0;
   404  00095E  9A9F               	bcf	3999,5,c	;volatile
   405                           
   406                           ;Serial.c: 32: TRISCbits.TRISC7 = 1;
   407  000960  8E94               	bsf	3988,7,c	;volatile
   408                           
   409                           ;Serial.c: 33: TRISCbits.TRISC6 = 0;
   410  000962  9C94               	bcf	3988,6,c	;volatile
   411  000964  0012               	return		;funcret
   412  000966                     __end_of_SerialBegin:
   413                           	opt stack 0
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           intcon	equ	0xFF2
   419                           indf0	equ	0xFEF
   420                           fsr0h	equ	0xFEA
   421                           fsr0l	equ	0xFE9
   422                           status	equ	0xFD8
   423                           
   424 ;; *************** function _Interrupt *****************
   425 ;; Defined at:
   426 ;;		line 32 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;  receive         1   16[COMRAM] unsigned char 
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : 0/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   440 ;;      Params:         0       0       0       0       0       0       0       0       0
   441 ;;      Locals:         1       0       0       0       0       0       0       0       0
   442 ;;      Temps:         14       0       0       0       0       0       0       0       0
   443 ;;      Totals:        15       0       0       0       0       0       0       0       0
   444 ;;Total ram usage:       15 bytes
   445 ;; Hardware stack levels used:    1
   446 ;; Hardware stack levels required when called:    1
   447 ;; This function calls:
   448 ;;		_SerialRead
   449 ;;		_print_char
   450 ;; This function is called by:
   451 ;;		Interrupt level 2
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455                           	psect	intcode
   456  000008                     __pintcode:
   457                           	opt stack 0
   458  000008                     _Interrupt:
   459                           	opt stack 28
   460                           
   461                           ;incstack = 0
   462  000008  8218               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   463  00000A  ED09  F004         	call	int_func,f	;refresh shadow registers
   464                           tblptru	equ	0xFF8
   465                           tblptrh	equ	0xFF7
   466                           tblptrl	equ	0xFF6
   467                           tablat	equ	0xFF5
   468                           intcon	equ	0xFF2
   469                           indf0	equ	0xFEF
   470                           fsr0h	equ	0xFEA
   471                           fsr0l	equ	0xFE9
   472                           status	equ	0xFD8
   473                           
   474                           	psect	intcode_body
   475  000812                     __pintcode_body:
   476                           	opt stack 28
   477  000812                     int_func:
   478                           	opt stack 28
   479  000812  0006               	pop		; remove dummy address from shadow register refresh
   480  000814  CFFA F003          	movff	pclath,??_Interrupt
   481  000818  CFFB F004          	movff	pclatu,??_Interrupt+1
   482  00081C  CFE9 F005          	movff	fsr0l,??_Interrupt+2
   483  000820  CFEA F006          	movff	fsr0h,??_Interrupt+3
   484  000824  CFE1 F007          	movff	fsr1l,??_Interrupt+4
   485  000828  CFE2 F008          	movff	fsr1h,??_Interrupt+5
   486  00082C  CFD9 F009          	movff	fsr2l,??_Interrupt+6
   487  000830  CFDA F00A          	movff	fsr2h,??_Interrupt+7
   488  000834  CFF3 F00B          	movff	prodl,??_Interrupt+8
   489  000838  CFF4 F00C          	movff	prodh,??_Interrupt+9
   490  00083C  CFF6 F00D          	movff	tblptrl,??_Interrupt+10
   491  000840  CFF7 F00E          	movff	tblptrh,??_Interrupt+11
   492  000844  CFF8 F00F          	movff	tblptru,??_Interrupt+12
   493  000848  CFF5 F010          	movff	tablat,??_Interrupt+13
   494                           
   495                           ;main.c: 35: if(PIR1bits.RCIF){
   496  00084C  AA9E               	btfss	3998,5,c	;volatile
   497  00084E  D00D               	goto	i2l29
   498                           
   499                           ;main.c: 36: PIR1bits.RCIF = 0;
   500  000850  9A9E               	bcf	3998,5,c	;volatile
   501                           
   502                           ;main.c: 38: char receive;
   503                           ;main.c: 39: if(SerialRead(&receive)){
   504  000852  0E11               	movlw	low Interrupt@receive
   505  000854  6E01               	movwf	SerialRead@receive,c
   506  000856  0E00               	movlw	high Interrupt@receive
   507  000858  6E02               	movwf	SerialRead@receive+1,c
   508  00085A  EC95  F004         	call	_SerialRead	;wreg free
   509  00085E  0900               	iorlw	0
   510  000860  B4D8               	btfsc	status,2,c
   511  000862  D003               	goto	i2l29
   512                           
   513                           ;main.c: 40: print_char(receive);
   514  000864  5011               	movf	Interrupt@receive,w,c
   515  000866  ECC6  F004         	call	_print_char
   516  00086A                     i2l29:
   517  00086A  C010  FFF5         	movff	??_Interrupt+13,tablat
   518  00086E  C00F  FFF8         	movff	??_Interrupt+12,tblptru
   519  000872  C00E  FFF7         	movff	??_Interrupt+11,tblptrh
   520  000876  C00D  FFF6         	movff	??_Interrupt+10,tblptrl
   521  00087A  C00C  FFF4         	movff	??_Interrupt+9,prodh
   522  00087E  C00B  FFF3         	movff	??_Interrupt+8,prodl
   523  000882  C00A  FFDA         	movff	??_Interrupt+7,fsr2h
   524  000886  C009  FFD9         	movff	??_Interrupt+6,fsr2l
   525  00088A  C008  FFE2         	movff	??_Interrupt+5,fsr1h
   526  00088E  C007  FFE1         	movff	??_Interrupt+4,fsr1l
   527  000892  C006  FFEA         	movff	??_Interrupt+3,fsr0h
   528  000896  C005  FFE9         	movff	??_Interrupt+2,fsr0l
   529  00089A  C004  FFFB         	movff	??_Interrupt+1,pclatu
   530  00089E  C003  FFFA         	movff	??_Interrupt,pclath
   531  0008A2  9218               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   532  0008A4  0011               	retfie		f
   533  0008A6                     __end_of_Interrupt:
   534                           	opt stack 0
   535                           pclatu	equ	0xFFB
   536                           pclath	equ	0xFFA
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           prodh	equ	0xFF4
   542                           prodl	equ	0xFF3
   543                           intcon	equ	0xFF2
   544                           indf0	equ	0xFEF
   545                           fsr0h	equ	0xFEA
   546                           fsr0l	equ	0xFE9
   547                           fsr1h	equ	0xFE2
   548                           fsr1l	equ	0xFE1
   549                           fsr2h	equ	0xFDA
   550                           fsr2l	equ	0xFD9
   551                           status	equ	0xFD8
   552                           
   553 ;; *************** function _print_char *****************
   554 ;; Defined at:
   555 ;;		line 56 in file "Serial.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;  word            1    wreg     unsigned char 
   558 ;; Auto vars:     Size  Location     Type
   559 ;;  word            1    0[COMRAM] unsigned char 
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   569 ;;      Params:         0       0       0       0       0       0       0       0       0
   570 ;;      Locals:         1       0       0       0       0       0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0       0       0
   572 ;;      Totals:         1       0       0       0       0       0       0       0       0
   573 ;;Total ram usage:        1 bytes
   574 ;; Hardware stack levels used:    1
   575 ;; This function calls:
   576 ;;		Nothing
   577 ;; This function is called by:
   578 ;;		_Interrupt
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text4
   583  00098C                     __ptext4:
   584                           	opt stack 0
   585  00098C                     _print_char:
   586                           	opt stack 28
   587                           
   588                           ;incstack = 0
   589                           ;print_char@word stored from wreg
   590  00098C  6E01               	movwf	print_char@word,c
   591                           
   592                           ;Serial.c: 57: TXREG = word;
   593  00098E  C001  FFAD         	movff	print_char@word,4013	;volatile
   594  000992                     i2l83:
   595  000992  B2AC               	btfsc	4012,1,c	;volatile
   596  000994  0012               	return	
   597  000996  D7FD               	goto	i2l83
   598  000998                     __end_of_print_char:
   599                           	opt stack 0
   600                           pclatu	equ	0xFFB
   601                           pclath	equ	0xFFA
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           prodh	equ	0xFF4
   607                           prodl	equ	0xFF3
   608                           intcon	equ	0xFF2
   609                           indf0	equ	0xFEF
   610                           fsr0h	equ	0xFEA
   611                           fsr0l	equ	0xFE9
   612                           fsr1h	equ	0xFE2
   613                           fsr1l	equ	0xFE1
   614                           fsr2h	equ	0xFDA
   615                           fsr2l	equ	0xFD9
   616                           status	equ	0xFD8
   617                           
   618 ;; *************** function _SerialRead *****************
   619 ;; Defined at:
   620 ;;		line 94 in file "Serial.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;  receive         2    0[COMRAM] PTR unsigned char 
   623 ;;		 -> Interrupt@receive(1), 
   624 ;; Auto vars:     Size  Location     Type
   625 ;;		None
   626 ;; Return value:  Size  Location     Type
   627 ;;                  1    wreg      unsigned char 
   628 ;; Registers used:
   629 ;;		wreg, fsr2l, fsr2h
   630 ;; Tracked objects:
   631 ;;		On entry : 0/0
   632 ;;		On exit  : 0/0
   633 ;;		Unchanged: 0/0
   634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   635 ;;      Params:         2       0       0       0       0       0       0       0       0
   636 ;;      Locals:         0       0       0       0       0       0       0       0       0
   637 ;;      Temps:          0       0       0       0       0       0       0       0       0
   638 ;;      Totals:         2       0       0       0       0       0       0       0       0
   639 ;;Total ram usage:        2 bytes
   640 ;; Hardware stack levels used:    1
   641 ;; This function calls:
   642 ;;		Nothing
   643 ;; This function is called by:
   644 ;;		_Interrupt
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text5
   649  00092A                     __ptext5:
   650                           	opt stack 0
   651  00092A                     _SerialRead:
   652                           	opt stack 28
   653                           
   654                           ;Serial.c: 95: if(RCSTAbits.FERR || RCSTAbits.OERR){
   655                           
   656                           ;incstack = 0
   657  00092A  B4AB               	btfsc	4011,2,c	;volatile
   658  00092C  D002               	goto	i2l115
   659  00092E  A2AB               	btfss	4011,1,c	;volatile
   660  000930  D004               	goto	i2l904
   661  000932                     i2l115:
   662                           
   663                           ;Serial.c: 96: RCSTAbits.CREN = 0;
   664  000932  98AB               	bcf	4011,4,c	;volatile
   665                           
   666                           ;Serial.c: 97: RCSTAbits.CREN = 1;
   667  000934  88AB               	bsf	4011,4,c	;volatile
   668                           
   669                           ;Serial.c: 99: return 0;
   670  000936  0E00               	movlw	0
   671  000938  0012               	return	
   672  00093A                     i2l904:
   673                           
   674                           ;Serial.c: 100: }
   675                           ;Serial.c: 102: *receive = RCREG;
   676  00093A  C001  FFD9         	movff	SerialRead@receive,fsr2l
   677  00093E  C002  FFDA         	movff	SerialRead@receive+1,fsr2h
   678  000942  CFAE FFDF          	movff	4014,indf2	;volatile
   679                           
   680                           ;Serial.c: 104: return 1;
   681  000946  0E01               	movlw	1
   682  000948  0012               	return	
   683  00094A                     __end_of_SerialRead:
   684                           	opt stack 0
   685                           pclatu	equ	0xFFB
   686                           pclath	equ	0xFFA
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           prodh	equ	0xFF4
   692                           prodl	equ	0xFF3
   693                           intcon	equ	0xFF2
   694                           indf0	equ	0xFEF
   695                           fsr0h	equ	0xFEA
   696                           fsr0l	equ	0xFE9
   697                           fsr1h	equ	0xFE2
   698                           fsr1l	equ	0xFE1
   699                           indf2	equ	0xFDF
   700                           fsr2h	equ	0xFDA
   701                           fsr2l	equ	0xFD9
   702                           status	equ	0xFD8
   703                           pclatu	equ	0xFFB
   704                           pclath	equ	0xFFA
   705                           tblptru	equ	0xFF8
   706                           tblptrh	equ	0xFF7
   707                           tblptrl	equ	0xFF6
   708                           tablat	equ	0xFF5
   709                           prodh	equ	0xFF4
   710                           prodl	equ	0xFF3
   711                           intcon	equ	0xFF2
   712                           indf0	equ	0xFEF
   713                           fsr0h	equ	0xFEA
   714                           fsr0l	equ	0xFE9
   715                           fsr1h	equ	0xFE2
   716                           fsr1l	equ	0xFE1
   717                           indf2	equ	0xFDF
   718                           fsr2h	equ	0xFDA
   719                           fsr2l	equ	0xFD9
   720                           status	equ	0xFD8
   721                           
   722                           	psect	rparam
   723  0000                     pclatu	equ	0xFFB
   724                           pclath	equ	0xFFA
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           prodh	equ	0xFF4
   730                           prodl	equ	0xFF3
   731                           intcon	equ	0xFF2
   732                           indf0	equ	0xFEF
   733                           fsr0h	equ	0xFEA
   734                           fsr0l	equ	0xFE9
   735                           fsr1h	equ	0xFE2
   736                           fsr1l	equ	0xFE1
   737                           indf2	equ	0xFDF
   738                           fsr2h	equ	0xFDA
   739                           fsr2l	equ	0xFD9
   740                           status	equ	0xFD8
   741                           
   742                           	psect	temp
   743  000018                     btemp:
   744                           	opt stack 0
   745  000018                     	ds	1
   746  0000                     int$flags	set	btemp
   747                           pclatu	equ	0xFFB
   748                           pclath	equ	0xFFA
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           prodh	equ	0xFF4
   754                           prodl	equ	0xFF3
   755                           intcon	equ	0xFF2
   756                           indf0	equ	0xFEF
   757                           fsr0h	equ	0xFEA
   758                           fsr0l	equ	0xFE9
   759                           fsr1h	equ	0xFE2
   760                           fsr1l	equ	0xFE1
   761                           indf2	equ	0xFDF
   762                           fsr2h	equ	0xFDA
   763                           fsr2l	equ	0xFD9
   764                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     23      23
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__ultoa	PTR unsigned char  size(2) Largest target is 33
		 -> println_long@buffer(COMRAM[33]), print_long@buffer(COMRAM[33]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 17
		 -> println_int@buffer(COMRAM[17]), print_int@buffer(COMRAM[17]), 

    SerialRead@receive	PTR unsigned char  size(2) Largest target is 1
		 -> Interrupt@receive(COMRAM[1]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 33
		 -> println_long@buffer(COMRAM[33]), print_long@buffer(COMRAM[33]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 17
		 -> println_int@buffer(COMRAM[17]), print_int@buffer(COMRAM[17]), 

    println_string@word	PTR unsigned char  size(2) Largest target is 33
		 -> println_long@buffer(COMRAM[33]), println_int@buffer(COMRAM[17]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_println_string

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_SerialRead

Critical Paths under _main in BANK0

    None.

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     318
                        _SerialBegin
                     _println_string
 ---------------------------------------------------------------------------------
 (1) _println_string                                       6     4      2     318
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _SerialBegin                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Interrupt                                           15    15      0     159
                                              2 COMRAM    15    15      0
                         _SerialRead
                         _print_char
 ---------------------------------------------------------------------------------
 (3) _print_char                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SerialRead                                           2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SerialBegin
   _println_string

 _Interrupt (ROOT)
   _SerialRead
   _print_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     17      17       1       24.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jul 20 00:45:06 2017

                     l19 097C                       l70 08DE                       l74 091C  
                     l77 0924              __CFG_BOR$ON 000000              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000                      l890 08E6  
                    l886 08B0             __CFG_CPB$OFF 000000                      u210 0912  
                    u217 0908                      u190 08DC             __CFG_CPD$OFF 000000  
                    u197 08D2             __CFG_FOSC$HS 000000             __CFG_WDT$OFF 000000  
                   STR_1 0801                     i2l29 086A                     i2l83 0992  
           __CFG_PWRT$ON 000000          ?_println_string 0012                     _main 0966  
                   fsr0h 000FEA                     fsr1h 000FE2                     indf0 000FEF  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0018  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  i2l115 0932                    i2l904 093A                    _RCREG 000FAE  
                  _SPBRG 000FAF            __CFG_USBDIV$1 000000                    _TXREG 000FAD  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    pclath 000FFA                    tablat 000FF5  
                  status 000FD8           __CFG_ICPRT$OFF 000000         Interrupt@receive 0011  
        __initialization 097E             __end_of_main 097E                   ??_main 0018  
          __activetblptr 000002                   _ADCON1 000FC1            ??_SerialBegin 0012  
             _SerialRead 092A           __CFG_XINST$OFF 000000       __size_of_Interrupt 089E  
         __CFG_STVREN$ON 000000           print_char@word 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 097E       println_string@word 0012  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001      __end_of_SerialBegin 0966  
         __pcstackCOMRAM 0001        __end_of_Interrupt 08A6         ??_println_string 0014  
            ?_SerialRead 0001          __CFG_VREGEN$OFF 000000              _SerialBegin 094A  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
                __pcinit 097E                  __ramtop 0800                  __ptext0 0966  
                __ptext1 08A6                  __ptext2 094A                  __ptext4 098C  
                __ptext5 092A      __size_of_SerialRead 0020           __pintcode_body 0812  
   end_of_initialization 097E            __Lmediumconst 0000                  int_func 0812  
              _RCSTAbits 000FAB               _print_char 098C                _TRISCbits 000F94  
              _TXSTAbits 000FAC      start_initialization 097E                _Interrupt 0008  
           ??_SerialRead 0003         __CFG_LPT1OSC$OFF 000000              ?_print_char 0001  
     __end_of_SerialRead 094A               ?_Interrupt 0001             ?_SerialBegin 0001  
              __pintcode 0008              __smallconst 0800                 _IPR1bits 000F9F  
               _PIE1bits 000F9D      __size_of_print_char 000C  __size_of_println_string 0084  
               _PIR1bits 000F9E         __CFG_WDTPS$32768 000000          println_string@i 0016  
            ??_Interrupt 0003                 __Hrparam 0000                 __Lrparam 0000  
          __size_of_main 0018     __size_of_SerialBegin 001C                 int$flags 0018  
  __CFG_CPUDIV$OSC1_PLL2 000000             ??_print_char 0001               _INTCONbits 000FF2  
               intlevel2 0000           _println_string 08A6       __end_of_print_char 0998  
 __end_of_println_string 092A        SerialRead@receive 0001  
