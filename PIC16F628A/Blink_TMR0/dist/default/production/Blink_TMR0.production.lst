

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Jun 09 22:53:48 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	intentry,global,class=CODE,delta=2
    10                           	dabs	1,0x7E,2
    11  0000                     
    12                           ; Version 1.42
    13                           ; Generated 13/04/2017 GMT
    14                           ; 
    15                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F628A Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001F                     	;# 
    70  0081                     	;# 
    71  0085                     	;# 
    72  0086                     	;# 
    73  008C                     	;# 
    74  008E                     	;# 
    75  0092                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009F                     	;# 
    83  0001                     _TMR0	set	1
    84  000B                     _INTCONbits	set	11
    85  0030                     _RB0	set	48
    86  0086                     _TRISBbits	set	134
    87  0081                     _OPTION_REGbits	set	129
    88                           
    89                           ; #config settings
    90  0000                     
    91                           	psect	cinit
    92  0011                     start_initialization:	
    93  0011                     __initialization:	
    94                           
    95                           ; Clear objects allocated to COMMON
    96  0011  01F5               	clrf	__pbssCOMMON& (0+127)
    97  0012                     end_of_initialization:	
    98                           ;End of C runtime variable initialization code
    99                           
   100  0012                     __end_of__initialization:	
   101  0012  0183               	clrf	3
   102  0013  282E               	ljmp	_main	;jump to C main() function
   103                           
   104                           	psect	bssCOMMON
   105  0075                     __pbssCOMMON:	
   106  0075                     _counter:	
   107  0075                     	ds	1
   108                           
   109                           	psect	cstackCOMMON
   110  0070                     __pcstackCOMMON:	
   111  0070                     ?_Interrupt:	
   112  0070                     ??_Interrupt:	
   113                           ; 1 bytes @ 0x0
   114                           
   115  0070                     ?_main:	
   116                           ; 1 bytes @ 0x0
   117                           
   118                           
   119                           ; 1 bytes @ 0x0
   120  0070                     	ds	5
   121  0075                     ??_main:	
   122                           
   123                           	psect	maintext
   124  002E                     __pmaintext:	
   125                           ; 1 bytes @ 0x5
   126 ;;
   127 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   128 ;;
   129 ;; *************** function _main *****************
   130 ;; Defined at:
   131 ;;		line 34 in file "Blink_TMR0.c"
   132 ;; Parameters:    Size  Location     Type
   133 ;;		None
   134 ;; Auto vars:     Size  Location     Type
   135 ;;		None
   136 ;; Return value:  Size  Location     Type
   137 ;;                  1    wreg      void 
   138 ;; Registers used:
   139 ;;		wreg, status,2, status,0
   140 ;; Tracked objects:
   141 ;;		On entry : B00/0
   142 ;;		On exit  : 0/0
   143 ;;		Unchanged: 0/0
   144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   145 ;;      Params:         0       0       0       0
   146 ;;      Locals:         0       0       0       0
   147 ;;      Temps:          0       0       0       0
   148 ;;      Totals:         0       0       0       0
   149 ;;Total ram usage:        0 bytes
   150 ;; Hardware stack levels required when called:    1
   151 ;; This function calls:
   152 ;;		Nothing
   153 ;; This function is called by:
   154 ;;		Startup code after reset
   155 ;; This function uses a non-reentrant model
   156 ;;
   157                           
   158                           
   159                           ;psect for function _main
   160  002E                     _main:	
   161                           
   162                           ;Blink_TMR0.c: 37: INTCONbits.GIE = 1;
   163                           
   164                           ;incstack = 0
   165                           ; Regs used in _main: [wreg+status,2+status,0]
   166  002E  178B               	bsf	11,7	;volatile
   167                           
   168                           ;Blink_TMR0.c: 38: INTCONbits.T0IE = 1;
   169  002F  168B               	bsf	11,5	;volatile
   170                           
   171                           ;Blink_TMR0.c: 39: INTCONbits.T0IF = 1;
   172  0030  150B               	bsf	11,2	;volatile
   173                           
   174                           ;Blink_TMR0.c: 40: OPTION_REGbits.T0CS = 0;
   175  0031  1683               	bsf	3,5	;RP0=1, select bank1
   176  0032  1303               	bcf	3,6	;RP1=0, select bank1
   177  0033  1281               	bcf	1,5	;volatile
   178                           
   179                           ;Blink_TMR0.c: 41: OPTION_REGbits.PSA = 0;
   180  0034  1181               	bcf	1,3	;volatile
   181                           
   182                           ;Blink_TMR0.c: 42: OPTION_REGbits.PS = 7;
   183  0035  3007               	movlw	7
   184  0036  0481               	iorwf	1,f	;volatile
   185                           
   186                           ;Blink_TMR0.c: 43: TMR0 = 0;
   187  0037  1283               	bcf	3,5	;RP0=0, select bank0
   188  0038  1303               	bcf	3,6	;RP1=0, select bank0
   189  0039  0181               	clrf	1	;volatile
   190                           
   191                           ;Blink_TMR0.c: 45: TRISBbits.TRISB0 = 0x00;
   192  003A  1683               	bsf	3,5	;RP0=1, select bank1
   193  003B  1303               	bcf	3,6	;RP1=0, select bank1
   194  003C  1006               	bcf	6,0	;volatile
   195                           
   196                           ;Blink_TMR0.c: 46: RB0 = 0x00;
   197  003D  1283               	bcf	3,5	;RP0=0, select bank0
   198  003E  1303               	bcf	3,6	;RP1=0, select bank0
   199  003F  1006               	bcf	6,0	;volatile
   200  0040                     l24:	
   201                           ;Blink_TMR0.c: 48: while(1){
   202                           
   203  0040  2840               	goto	l24
   204  0041                     __end_of_main:	
   205                           
   206                           	psect	text1
   207  0014                     __ptext1:	
   208 ;; *************** function _Interrupt *****************
   209 ;; Defined at:
   210 ;;		line 14 in file "Blink_TMR0.c"
   211 ;; Parameters:    Size  Location     Type
   212 ;;		None
   213 ;; Auto vars:     Size  Location     Type
   214 ;;		None
   215 ;; Return value:  Size  Location     Type
   216 ;;                  1    wreg      void 
   217 ;; Registers used:
   218 ;;		wreg, status,2, status,0
   219 ;; Tracked objects:
   220 ;;		On entry : 0/0
   221 ;;		On exit  : 0/0
   222 ;;		Unchanged: 0/0
   223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   224 ;;      Params:         0       0       0       0
   225 ;;      Locals:         0       0       0       0
   226 ;;      Temps:          5       0       0       0
   227 ;;      Totals:         5       0       0       0
   228 ;;Total ram usage:        5 bytes
   229 ;; Hardware stack levels used:    1
   230 ;; This function calls:
   231 ;;		Nothing
   232 ;; This function is called by:
   233 ;;		Interrupt level 1
   234 ;; This function uses a non-reentrant model
   235 ;;
   236                           
   237                           
   238                           ;psect for function _Interrupt
   239  0014                     _Interrupt:	
   240                           
   241                           ;Blink_TMR0.c: 19: if(INTCONbits.T0IF){
   242  0014  1D0B               	btfss	11,2	;volatile
   243  0015  2823               	goto	i1l19
   244                           
   245                           ;Blink_TMR0.c: 22: if(counter == 32){
   246  0016  3020               	movlw	32
   247  0017  0675               	xorwf	_counter,w
   248  0018  1D03               	btfss	3,2
   249  0019  281D               	goto	i1l495
   250                           
   251                           ;Blink_TMR0.c: 23: counter = 0;
   252  001A  01F5               	clrf	_counter
   253                           
   254                           ;Blink_TMR0.c: 24: RB0 = ~RB0;
   255  001B  3001               	movlw	1
   256  001C  0686               	xorwf	6,f
   257  001D                     i1l495:	
   258                           
   259                           ;Blink_TMR0.c: 25: }
   260                           ;Blink_TMR0.c: 27: TMR0 = 0;
   261  001D  0181               	clrf	1	;volatile
   262                           
   263                           ;Blink_TMR0.c: 28: INTCONbits.T0IF = 0;
   264  001E  110B               	bcf	11,2	;volatile
   265                           
   266                           ;Blink_TMR0.c: 29: counter++;
   267  001F  3001               	movlw	1
   268  0020  00F0               	movwf	??_Interrupt
   269  0021  0870               	movf	??_Interrupt,w
   270  0022  07F5               	addwf	_counter,f
   271  0023                     i1l19:	
   272  0023  0874               	movf	??_Interrupt+4,w
   273  0024  00FF               	movwf	127
   274  0025  0873               	movf	??_Interrupt+3,w
   275  0026  008A               	movwf	10
   276  0027  0872               	movf	??_Interrupt+2,w
   277  0028  0084               	movwf	4
   278  0029  0E71               	swapf	(??_Interrupt+1)^(0+-128),w
   279  002A  0083               	movwf	3
   280  002B  0EFE               	swapf	126,f
   281  002C  0E7E               	swapf	126,w
   282  002D  0009               	retfie
   283  002E                     __end_of_Interrupt:	
   284  007E                     btemp	set	126	;btemp
   285  007E                     wtemp0	set	126
   286                           
   287                           	psect	intentry
   288  0004                     __pintentry:	
   289                           ;incstack = 0
   290                           ; Regs used in _Interrupt: [wreg+status,2+status,0]
   291                           
   292  0004                     interrupt_function:	
   293  007E                     saved_w	set	btemp
   294  0004  00FE               	movwf	btemp
   295  0005  0E03               	swapf	3,w
   296  0006  00F1               	movwf	??_Interrupt+1
   297  0007  0804               	movf	4,w
   298  0008  00F2               	movwf	??_Interrupt+2
   299  0009  080A               	movf	10,w
   300  000A  00F3               	movwf	??_Interrupt+3
   301  000B  1283               	bcf	3,5	;RP0=0, select bank0
   302  000C  1303               	bcf	3,6	;RP1=0, select bank0
   303  000D  087F               	movf	btemp+1,w
   304  000E  00F4               	movwf	??_Interrupt+4
   305  000F  2814               	ljmp	_Interrupt


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupt in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _Interrupt                                            5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _Interrupt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       6       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       6      10        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Jun 09 22:53:48 2017

            __CFG_CP$OFF 0000                       l24 0040                      _RB0 0030  
           __CFG_CPD$OFF 0000                      fsr0 0004             __CFG_FOSC$HS 0000  
           __CFG_LVP$OFF 0000                     i1l19 0023                     _TMR0 0001  
                   _main 002E                     btemp 007E            __CFG_BOREN$ON 0000  
                   start 0010            __CFG_MCLRE$ON 0000                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    i1l495 001D            __CFG_PWRTE$ON 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0011             __end_of_main 0041                   ??_main 0075  
     __size_of_Interrupt 001A                   saved_w 007E  __end_of__initialization 0012  
         __pcstackCOMMON 0070           _OPTION_REGbits 0081        __end_of_Interrupt 002E  
             __pmaintext 002E               __pintentry 0004                  __ptext1 0014  
                _counter 0075     end_of_initialization 0012                _TRISBbits 0086  
    start_initialization 0011                _Interrupt 0014              __pbssCOMMON 0075  
              ___latbits 0000               ?_Interrupt 0070        interrupt_function 0004  
            ??_Interrupt 0070            __size_of_main 0013               _INTCONbits 000B  
               intlevel1 0000  
