

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jun 27 16:23:29 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.42
    18                           ; Generated 13/04/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F628A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0015                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  008C                     	;# 
    79  008E                     	;# 
    80  0092                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009F                     	;# 
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  008C                     	;# 
   116  008E                     	;# 
   117  0092                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009F                     	;# 
   125  001A                     _RCREG	set	26
   126  0019                     _TXREG	set	25
   127  000B                     _INTCONbits	set	11
   128  0018                     _RCSTAbits	set	24
   129  000C                     _PIR1bits	set	12
   130  005F                     _GIE	set	95
   131  0086                     _TRISBbits	set	134
   132  008C                     _PIE1bits	set	140
   133  0098                     _TXSTAbits	set	152
   134  0099                     _SPBRG	set	153
   135                           
   136                           	psect	strings
   137  0057                     __pstrings:	
   138  0057                     stringtab:	
   139  0057                     __stringtab:	
   140  0057                     stringcode:	
   141                           ;	String table - string pointers are 1 byte each
   142                           
   143  0057                     stringdir:	
   144  0057  3000               	movlw	high stringdir
   145  0058  008A               	movwf	10
   146  0059  0804               	movf	4,w
   147  005A  0A84               	incf	4,f
   148  005B  0782               	addwf	2,f
   149  005C                     __stringbase:	
   150  005C  3400               	retlw	0
   151  005D                     __end_of__stringtab:	
   152  005D                     STR_1:	
   153  005D  3454               	retlw	84	;'T'
   154  005E  3465               	retlw	101	;'e'
   155  005F  3473               	retlw	115	;'s'
   156  0060  3474               	retlw	116	;'t'
   157  0061  3461               	retlw	97	;'a'
   158  0062  346E               	retlw	110	;'n'
   159  0063  3464               	retlw	100	;'d'
   160  0064  346F               	retlw	111	;'o'
   161  0065  3420               	retlw	32	;' '
   162  0066  3455               	retlw	85	;'U'
   163  0067  3453               	retlw	83	;'S'
   164  0068  3441               	retlw	65	;'A'
   165  0069  3452               	retlw	82	;'R'
   166  006A  3454               	retlw	84	;'T'
   167  006B  3421               	retlw	33	;'!'
   168  006C  3400               	retlw	0
   169                           
   170                           ; #config settings
   171  0000                     
   172                           	psect	cinit
   173  0011                     start_initialization:	
   174  0011                     __initialization:	
   175  0011                     end_of_initialization:	
   176                           ;End of C runtime variable initialization code
   177                           
   178  0011                     __end_of__initialization:	
   179  0011  0183               	clrf	3
   180  0012  289E               	ljmp	_main	;jump to C main() function
   181                           
   182                           	psect	cstackCOMMON
   183  0070                     __pcstackCOMMON:	
   184  0070                     ?_SerialBegin:	
   185  0070                     ?_println_string:	
   186                           ; 1 bytes @ 0x0
   187                           
   188  0070                     ?_SerialRead:	
   189                           ; 1 bytes @ 0x0
   190                           
   191  0070                     ??_SerialRead:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0070                     ?_print_char:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0070                     ??_print_char:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0070                     ?_main:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0070                     ?_Interrupt:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     print_char@word:	
   207                           ; 1 bytes @ 0x0
   208                           
   209                           
   210                           ; 1 bytes @ 0x0
   211  0070                     	ds	1
   212  0071                     SerialRead@receive:	
   213                           
   214                           ; 1 bytes @ 0x1
   215  0071                     	ds	1
   216  0072                     ??_Interrupt:	
   217                           
   218                           ; 1 bytes @ 0x2
   219  0072                     	ds	4
   220  0076                     Interrupt@receive:	
   221                           
   222                           ; 1 bytes @ 0x6
   223  0076                     	ds	1
   224  0077                     ??_SerialBegin:	
   225  0077                     ??_println_string:	
   226                           ; 1 bytes @ 0x7
   227                           
   228  0077                     ??_main:	
   229                           ; 1 bytes @ 0x7
   230                           
   231                           
   232                           	psect	cstackBANK0
   233  0020                     __pcstackBANK0:	
   234                           ; 1 bytes @ 0x7
   235                           
   236  0020                     println_string@i:	
   237                           
   238                           ; 2 bytes @ 0x0
   239  0020                     	ds	2
   240  0022                     println_string@word:	
   241                           
   242                           ; 1 bytes @ 0x2
   243  0022                     	ds	1
   244                           
   245                           	psect	maintext
   246  009E                     __pmaintext:	
   247 ;;
   248 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   249 ;;
   250 ;; *************** function _main *****************
   251 ;; Defined at:
   252 ;;		line 13 in file "main.c"
   253 ;; Parameters:    Size  Location     Type
   254 ;;		None
   255 ;; Auto vars:     Size  Location     Type
   256 ;;		None
   257 ;; Return value:  Size  Location     Type
   258 ;;                  1    wreg      void 
   259 ;; Registers used:
   260 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   261 ;; Tracked objects:
   262 ;;		On entry : B00/0
   263 ;;		On exit  : 0/0
   264 ;;		Unchanged: 0/0
   265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   266 ;;      Params:         0       0       0       0
   267 ;;      Locals:         0       0       0       0
   268 ;;      Temps:          0       0       0       0
   269 ;;      Totals:         0       0       0       0
   270 ;;Total ram usage:        0 bytes
   271 ;; Hardware stack levels required when called:    3
   272 ;; This function calls:
   273 ;;		_SerialBegin
   274 ;;		_println_string
   275 ;; This function is called by:
   276 ;;		Startup code after reset
   277 ;; This function uses a non-reentrant model
   278 ;;
   279                           
   280                           
   281                           ;psect for function _main
   282  009E                     _main:	
   283                           
   284                           ;main.c: 15: SerialBegin();
   285                           
   286                           ;incstack = 0
   287                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   288  009E  206D               	fcall	_SerialBegin
   289                           
   290                           ;main.c: 17: println_string("Testando USART!");
   291  009F  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   292  00A0  2013               	fcall	_println_string
   293  00A1                     l15:	
   294                           ;main.c: 19: while(1){
   295                           
   296  00A1  28A1               	goto	l15
   297  00A2                     __end_of_main:	
   298                           ;main.c: 20: }
   299                           ;main.c: 22: return;
   300                           
   301                           
   302                           	psect	text1
   303  0013                     __ptext1:	
   304 ;; *************** function _println_string *****************
   305 ;; Defined at:
   306 ;;		line 43 in file "Serial.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;  word            1    wreg     PTR unsigned char 
   309 ;;		 -> STR_1(16), 
   310 ;; Auto vars:     Size  Location     Type
   311 ;;  word            1    2[BANK0 ] PTR unsigned char 
   312 ;;		 -> STR_1(16), 
   313 ;;  i               2    0[BANK0 ] int 
   314 ;; Return value:  Size  Location     Type
   315 ;;                  1    wreg      void 
   316 ;; Registers used:
   317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   318 ;; Tracked objects:
   319 ;;		On entry : 0/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   323 ;;      Params:         0       0       0       0
   324 ;;      Locals:         0       3       0       0
   325 ;;      Temps:          0       0       0       0
   326 ;;      Totals:         0       3       0       0
   327 ;;Total ram usage:        3 bytes
   328 ;; Hardware stack levels used:    1
   329 ;; Hardware stack levels required when called:    2
   330 ;; This function calls:
   331 ;;		Nothing
   332 ;; This function is called by:
   333 ;;		_main
   334 ;; This function uses a non-reentrant model
   335 ;;
   336                           
   337                           
   338                           ;psect for function _println_string
   339  0013                     _println_string:	
   340                           
   341                           ;incstack = 0
   342                           ; Regs used in _println_string: [wreg-fsr0h+status,2+status,0+pclath]
   343                           ;println_string@word stored from wreg
   344  0013  1283               	bcf	3,5	;RP0=0, select bank0
   345  0014  1303               	bcf	3,6	;RP1=0, select bank0
   346  0015  00A2               	movwf	println_string@word
   347                           
   348                           ;Serial.c: 44: for(int i = 0; word[i] != '\0' ; i++){
   349  0016  01A0               	clrf	println_string@i
   350  0017  01A1               	clrf	println_string@i+1
   351  0018                     l640:	
   352  0018  0820               	movf	println_string@i,w
   353  0019  0722               	addwf	println_string@word,w
   354  001A  0084               	movwf	4
   355  001B  2057               	fcall	stringdir
   356  001C  3A00               	xorlw	0
   357  001D  1903               	btfsc	3,2
   358  001E  2831               	goto	l642
   359                           
   360                           ;Serial.c: 45: TXREG = word[i];
   361  001F  0820               	movf	println_string@i,w
   362  0020  0722               	addwf	println_string@word,w
   363  0021  0084               	movwf	4
   364  0022  2057               	fcall	stringdir
   365  0023  0099               	movwf	25	;volatile
   366  0024                     l62:	
   367                           ;Serial.c: 46: while(!TXSTAbits.TRMT);
   368                           
   369  0024  1683               	bsf	3,5	;RP0=1, select bank1
   370  0025  1303               	bcf	3,6	;RP1=0, select bank1
   371  0026  1C98               	btfss	24,1	;volatile
   372  0027  2824               	goto	l62
   373  0028  3001               	movlw	1
   374  0029  1283               	bcf	3,5	;RP0=0, select bank0
   375  002A  1303               	bcf	3,6	;RP1=0, select bank0
   376  002B  07A0               	addwf	println_string@i,f
   377  002C  1803               	skipnc
   378  002D  0AA1               	incf	println_string@i+1,f
   379  002E  3000               	movlw	0
   380  002F  07A1               	addwf	println_string@i+1,f
   381  0030  2818               	goto	l640
   382  0031                     l642:	
   383                           
   384                           ;Serial.c: 47: }
   385                           ;Serial.c: 48: TXREG = '\r';
   386  0031  300D               	movlw	13
   387  0032  0099               	movwf	25	;volatile
   388  0033                     l66:	
   389                           ;Serial.c: 49: while(!TXSTAbits.TRMT);
   390                           
   391  0033  1683               	bsf	3,5	;RP0=1, select bank1
   392  0034  1303               	bcf	3,6	;RP1=0, select bank1
   393  0035  1C98               	btfss	24,1	;volatile
   394  0036  2833               	goto	l66
   395                           
   396                           ;Serial.c: 50: TXREG = '\n';
   397  0037  300A               	movlw	10
   398  0038  1283               	bcf	3,5	;RP0=0, select bank0
   399  0039  1303               	bcf	3,6	;RP1=0, select bank0
   400  003A  0099               	movwf	25	;volatile
   401  003B                     l69:	
   402                           ;Serial.c: 51: while(!TXSTAbits.TRMT);
   403                           
   404  003B  1683               	bsf	3,5	;RP0=1, select bank1
   405  003C  1303               	bcf	3,6	;RP1=0, select bank1
   406  003D  1898               	btfsc	24,1	;volatile
   407  003E  0008               	return
   408  003F  283B               	goto	l69
   409  0040                     __end_of_println_string:	
   410                           
   411                           	psect	text2
   412  006D                     __ptext2:	
   413 ;; *************** function _SerialBegin *****************
   414 ;; Defined at:
   415 ;;		line 14 in file "Serial.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;		None
   420 ;; Return value:  Size  Location     Type
   421 ;;                  1    wreg      void 
   422 ;; Registers used:
   423 ;;		wreg
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   429 ;;      Params:         0       0       0       0
   430 ;;      Locals:         0       0       0       0
   431 ;;      Temps:          0       0       0       0
   432 ;;      Totals:         0       0       0       0
   433 ;;Total ram usage:        0 bytes
   434 ;; Hardware stack levels used:    1
   435 ;; Hardware stack levels required when called:    2
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           
   444                           ;psect for function _SerialBegin
   445  006D                     _SerialBegin:	
   446                           
   447                           ;Serial.c: 16: SPBRG = 25;
   448                           
   449                           ;incstack = 0
   450                           ; Regs used in _SerialBegin: [wreg]
   451  006D  3019               	movlw	25
   452  006E  1683               	bsf	3,5	;RP0=1, select bank1
   453  006F  1303               	bcf	3,6	;RP1=0, select bank1
   454  0070  0099               	movwf	25	;volatile
   455                           
   456                           ;Serial.c: 18: TXSTAbits.BRGH = 1;
   457  0071  1518               	bsf	24,2	;volatile
   458                           
   459                           ;Serial.c: 19: TXSTAbits.SYNC = 0;
   460  0072  1218               	bcf	24,4	;volatile
   461                           
   462                           ;Serial.c: 20: TXSTAbits.TXEN = 1;
   463  0073  1698               	bsf	24,5	;volatile
   464                           
   465                           ;Serial.c: 22: RCSTAbits.SPEN = 1;
   466  0074  1283               	bcf	3,5	;RP0=0, select bank0
   467  0075  1303               	bcf	3,6	;RP1=0, select bank0
   468  0076  1798               	bsf	24,7	;volatile
   469                           
   470                           ;Serial.c: 23: RCSTAbits.CREN = 1;
   471  0077  1618               	bsf	24,4	;volatile
   472                           
   473                           ;Serial.c: 25: INTCONbits.PEIE = 1;
   474  0078  170B               	bsf	11,6	;volatile
   475                           
   476                           ;Serial.c: 27: PIR1bits.RCIF = 0;
   477  0079  128C               	bcf	12,5	;volatile
   478                           
   479                           ;Serial.c: 28: PIE1bits.RCIE = 1;
   480  007A  1683               	bsf	3,5	;RP0=1, select bank1
   481  007B  1303               	bcf	3,6	;RP1=0, select bank1
   482  007C  168C               	bsf	12,5	;volatile
   483                           
   484                           ;Serial.c: 30: TRISBbits.TRISB1 = 1;
   485  007D  1486               	bsf	6,1	;volatile
   486                           
   487                           ;Serial.c: 31: TRISBbits.TRISB2 = 0;
   488  007E  1106               	bcf	6,2	;volatile
   489                           
   490                           ;Serial.c: 33: (GIE = 1);
   491  007F  178B               	bsf	11,7	;volatile
   492  0080  0008               	return
   493  0081                     __end_of_SerialBegin:	
   494                           
   495                           	psect	text3
   496  0040                     __ptext3:	
   497 ;; *************** function _Interrupt *****************
   498 ;; Defined at:
   499 ;;		line 27 in file "main.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;		None
   502 ;; Auto vars:     Size  Location     Type
   503 ;;  receive         1    6[COMMON] unsigned char 
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   513 ;;      Params:         0       0       0       0
   514 ;;      Locals:         1       0       0       0
   515 ;;      Temps:          4       0       0       0
   516 ;;      Totals:         5       0       0       0
   517 ;;Total ram usage:        5 bytes
   518 ;; Hardware stack levels used:    1
   519 ;; Hardware stack levels required when called:    1
   520 ;; This function calls:
   521 ;;		_SerialRead
   522 ;;		_print_char
   523 ;; This function is called by:
   524 ;;		Interrupt level 1
   525 ;; This function uses a non-reentrant model
   526 ;;
   527                           
   528                           
   529                           ;psect for function _Interrupt
   530  0040                     _Interrupt:	
   531                           
   532                           ;main.c: 30: if(PIR1bits.RCIF){
   533  0040  1E8C               	btfss	12,5	;volatile
   534  0041  284A               	goto	i1l25
   535                           
   536                           ;main.c: 31: PIR1bits.RCIF = 0;
   537  0042  128C               	bcf	12,5	;volatile
   538                           
   539                           ;main.c: 33: char receive;
   540                           ;main.c: 34: if(SerialRead(&receive)){
   541  0043  3076               	movlw	(low (Interrupt@receive| 0))& (0+255)
   542  0044  2081               	fcall	_SerialRead
   543  0045  3A00               	xorlw	0
   544  0046  1903               	skipnz
   545  0047  284A               	goto	i1l25
   546                           
   547                           ;main.c: 35: print_char(receive);
   548  0048  0876               	movf	Interrupt@receive,w
   549  0049  2094               	fcall	_print_char
   550  004A                     i1l25:	
   551  004A  0875               	movf	??_Interrupt+3,w
   552  004B  1283               	bcf	3,5	;RP0=0, select bank0
   553  004C  1303               	bcf	3,6	;RP1=0, select bank0
   554  004D  00FF               	movwf	127
   555  004E  0874               	movf	??_Interrupt+2,w
   556  004F  008A               	movwf	10
   557  0050  0873               	movf	??_Interrupt+1,w
   558  0051  0084               	movwf	4
   559  0052  0E72               	swapf	??_Interrupt^(0+-128),w
   560  0053  0083               	movwf	3
   561  0054  0EFE               	swapf	126,f
   562  0055  0E7E               	swapf	126,w
   563  0056  0009               	retfie
   564  0057                     __end_of_Interrupt:	
   565                           
   566                           	psect	intentry
   567  0004                     __pintentry:	
   568                           ;incstack = 0
   569                           ; Regs used in _Interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   570                           
   571  0004                     interrupt_function:	
   572  007E                     saved_w	set	btemp
   573  0004  00FE               	movwf	btemp
   574  0005  0E03               	swapf	3,w
   575  0006  00F2               	movwf	??_Interrupt
   576  0007  0804               	movf	4,w
   577  0008  00F3               	movwf	??_Interrupt+1
   578  0009  080A               	movf	10,w
   579  000A  00F4               	movwf	??_Interrupt+2
   580  000B  1283               	bcf	3,5	;RP0=0, select bank0
   581  000C  1303               	bcf	3,6	;RP1=0, select bank0
   582  000D  087F               	movf	btemp+1,w
   583  000E  00F5               	movwf	??_Interrupt+3
   584  000F  2840               	ljmp	_Interrupt
   585                           
   586                           	psect	text4
   587  0094                     __ptext4:	
   588 ;; *************** function _print_char *****************
   589 ;; Defined at:
   590 ;;		line 54 in file "Serial.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;  word            1    wreg     unsigned char 
   593 ;; Auto vars:     Size  Location     Type
   594 ;;  word            1    0[COMMON] unsigned char 
   595 ;; Return value:  Size  Location     Type
   596 ;;                  1    wreg      void 
   597 ;; Registers used:
   598 ;;		wreg
   599 ;; Tracked objects:
   600 ;;		On entry : 0/0
   601 ;;		On exit  : 0/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   604 ;;      Params:         0       0       0       0
   605 ;;      Locals:         1       0       0       0
   606 ;;      Temps:          0       0       0       0
   607 ;;      Totals:         1       0       0       0
   608 ;;Total ram usage:        1 bytes
   609 ;; Hardware stack levels used:    1
   610 ;; This function calls:
   611 ;;		Nothing
   612 ;; This function is called by:
   613 ;;		_Interrupt
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           
   618                           ;psect for function _print_char
   619  0094                     _print_char:	
   620                           
   621                           ;incstack = 0
   622                           ; Regs used in _print_char: [wreg]
   623                           ;print_char@word stored from wreg
   624  0094  00F0               	movwf	print_char@word
   625                           
   626                           ;Serial.c: 55: TXREG = word;
   627  0095  0870               	movf	print_char@word,w
   628  0096  1283               	bcf	3,5	;RP0=0, select bank0
   629  0097  1303               	bcf	3,6	;RP1=0, select bank0
   630  0098  0099               	movwf	25	;volatile
   631  0099                     i1l75:	
   632                           ;Serial.c: 56: while(!TXSTAbits.TRMT);
   633                           
   634  0099  1683               	bsf	3,5	;RP0=1, select bank1
   635  009A  1303               	bcf	3,6	;RP1=0, select bank1
   636  009B  1898               	btfsc	24,1	;volatile
   637  009C  0008               	return
   638  009D  2899               	goto	i1l75
   639  009E                     __end_of_print_char:	
   640                           
   641                           	psect	text5
   642  0081                     __ptext5:	
   643 ;; *************** function _SerialRead *****************
   644 ;; Defined at:
   645 ;;		line 68 in file "Serial.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;  receive         1    wreg     PTR unsigned char 
   648 ;;		 -> Interrupt@receive(1), 
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  receive         1    1[COMMON] PTR unsigned char 
   651 ;;		 -> Interrupt@receive(1), 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      unsigned char 
   654 ;; Registers used:
   655 ;;		wreg, fsr0l, fsr0h
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   661 ;;      Params:         0       0       0       0
   662 ;;      Locals:         1       0       0       0
   663 ;;      Temps:          1       0       0       0
   664 ;;      Totals:         2       0       0       0
   665 ;;Total ram usage:        2 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; This function calls:
   668 ;;		Nothing
   669 ;; This function is called by:
   670 ;;		_Interrupt
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           
   675                           ;psect for function _SerialRead
   676  0081                     _SerialRead:	
   677                           
   678                           ;incstack = 0
   679                           ; Regs used in _SerialRead: [wregfsr0]
   680                           ;SerialRead@receive stored from wreg
   681  0081  00F1               	movwf	SerialRead@receive
   682                           
   683                           ;Serial.c: 69: if(RCSTAbits.FERR || RCSTAbits.OERR){
   684  0082  1283               	bcf	3,5	;RP0=0, select bank0
   685  0083  1303               	bcf	3,6	;RP1=0, select bank0
   686  0084  1918               	btfsc	24,2	;volatile
   687  0085  2888               	goto	i1l95
   688  0086  1C98               	btfss	24,1	;volatile
   689  0087  288C               	goto	i1l600
   690  0088                     i1l95:	
   691                           
   692                           ;Serial.c: 70: RCSTAbits.CREN = 0;
   693  0088  1218               	bcf	24,4	;volatile
   694                           
   695                           ;Serial.c: 71: RCSTAbits.CREN = 1;
   696  0089  1618               	bsf	24,4	;volatile
   697                           
   698                           ;Serial.c: 73: return 0;
   699  008A  3000               	movlw	0
   700  008B  0008               	return
   701  008C                     i1l600:	
   702                           
   703                           ;Serial.c: 74: }
   704                           ;Serial.c: 76: *receive = RCREG;
   705  008C  081A               	movf	26,w	;volatile
   706  008D  00F0               	movwf	??_SerialRead
   707  008E  0871               	movf	SerialRead@receive,w
   708  008F  0084               	movwf	4
   709  0090  0870               	movf	??_SerialRead,w
   710  0091  0080               	movwf	0
   711                           
   712                           ;Serial.c: 78: return 1;
   713  0092  3001               	movlw	1
   714  0093  0008               	return
   715  0094                     __end_of_SerialRead:	
   716  007E                     btemp	set	126	;btemp
   717  007E                     wtemp0	set	126


Data Sizes:
    Strings     16
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      3       3
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    SerialRead@receive	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@receive(COMMON[1]), 

    println_string@word	PTR unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Interrupt in COMMON

    _Interrupt->_SerialRead

Critical Paths under _main in BANK0

    _main->_println_string

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     117
                        _SerialBegin
                     _println_string
 ---------------------------------------------------------------------------------
 (1) _println_string                                       3     3      0     117
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SerialBegin                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Interrupt                                            5     5      0      84
                                              2 COMMON     5     5      0
                         _SerialRead
                         _print_char
 ---------------------------------------------------------------------------------
 (3) _print_char                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SerialRead                                           2     2      0      39
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SerialBegin
   _println_string

 _Interrupt (ROOT)
   _SerialRead
   _print_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      3       3       3        3.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jun 27 16:23:29 2017

                      pc 0002              __CFG_CP$OFF 0000                       l15 00A1  
                     l62 0024                       l66 0033                       l69 003B  
                     fsr 0004                      l640 0018                      l642 0031  
                    _GIE 005F             __CFG_CPD$OFF 0000                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000  
                   STR_1 005D                     i1l25 004A                     i1l75 0099  
                   i1l95 0088          ?_println_string 0070                     _main 009E  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0010  
          __CFG_MCLRE$ON 0000                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  i1l600 008C                    _RCREG 001A                    _SPBRG 0099  
                  _TXREG 0019            __CFG_PWRTE$ON 0000                    pclath 000A  
                  status 0003                    wtemp0 007E         Interrupt@receive 0076  
        __initialization 0011             __end_of_main 00A2                   ??_main 0077  
          ??_SerialBegin 0077               _SerialRead 0081       __size_of_Interrupt 0017  
         print_char@word 0070                   saved_w 007E  __end_of__initialization 0011  
     println_string@word 0022      __end_of_SerialBegin 0081           __pcstackCOMMON 0070  
      __end_of_Interrupt 0057         ??_println_string 0077              ?_SerialRead 0070  
             __pmaintext 009E               __pintentry 0004               __stringtab 0057  
            _SerialBegin 006D                  __ptext1 0013                  __ptext2 006D  
                __ptext3 0040                  __ptext4 0094                  __ptext5 0081  
    __size_of_SerialRead 0013     end_of_initialization 0011                _RCSTAbits 0018  
             _print_char 0094                _TRISBbits 0086                _TXSTAbits 0098  
    start_initialization 0011                _Interrupt 0040             ??_SerialRead 0070  
            ?_print_char 0070                ___latbits 0000            __pcstackBANK0 0020  
     __end_of_SerialRead 0094               ?_Interrupt 0070             ?_SerialBegin 0070  
              __pstrings 0057        interrupt_function 0004                 _PIE1bits 008C  
    __size_of_print_char 000A  __size_of_println_string 002D                 _PIR1bits 000C  
            __stringbase 005C          println_string@i 0020              ??_Interrupt 0072  
     __end_of__stringtab 005D            __size_of_main 0004     __size_of_SerialBegin 0014  
           ??_print_char 0070               _INTCONbits 000B                 intlevel1 0000  
         _println_string 0013                stringcode 0057       __end_of_print_char 009E  
               stringdir 0057                 stringtab 0057   __end_of_println_string 0040  
      SerialRead@receive 0071  
